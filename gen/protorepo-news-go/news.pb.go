// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: news.proto

package newspb

import (
	context "context"
	protorepo_share_go "github.com/sbasestarter/proto-repo/gen/protorepo-share-go"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Author struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	NickName string `protobuf:"bytes,2,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	Avatar   string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
}

func (x *Author) Reset() {
	*x = Author{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Author) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Author) ProtoMessage() {}

func (x *Author) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Author.ProtoReflect.Descriptor instead.
func (*Author) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{0}
}

func (x *Author) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Author) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *Author) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

type NewsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title    string  `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Summary  string  `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
	Image    string  `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	At       int64   `protobuf:"varint,5,opt,name=at,proto3" json:"at,omitempty"`
	Category string  `protobuf:"bytes,6,opt,name=category,proto3" json:"category,omitempty"`
	Author   *Author `protobuf:"bytes,7,opt,name=author,proto3" json:"author,omitempty"`
}

func (x *NewsInfo) Reset() {
	*x = NewsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsInfo) ProtoMessage() {}

func (x *NewsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsInfo.ProtoReflect.Descriptor instead.
func (*NewsInfo) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{1}
}

func (x *NewsInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NewsInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NewsInfo) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *NewsInfo) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *NewsInfo) GetAt() int64 {
	if x != nil {
		return x.At
	}
	return 0
}

func (x *NewsInfo) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *NewsInfo) GetAuthor() *Author {
	if x != nil {
		return x.Author
	}
	return nil
}

type GetNewsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetNewsRequest) Reset() {
	*x = GetNewsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewsRequest) ProtoMessage() {}

func (x *GetNewsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewsRequest.ProtoReflect.Descriptor instead.
func (*GetNewsRequest) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{2}
}

func (x *GetNewsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetNewsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	News *NewsInfo `protobuf:"bytes,1,opt,name=news,proto3" json:"news,omitempty"`
}

func (x *GetNewsResponse) Reset() {
	*x = GetNewsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewsResponse) ProtoMessage() {}

func (x *GetNewsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewsResponse.ProtoReflect.Descriptor instead.
func (*GetNewsResponse) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{3}
}

func (x *GetNewsResponse) GetNews() *NewsInfo {
	if x != nil {
		return x.News
	}
	return nil
}

type GetHomePageJSONDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Design bool   `protobuf:"varint,2,opt,name=design,proto3" json:"design,omitempty"`
}

func (x *GetHomePageJSONDataRequest) Reset() {
	*x = GetHomePageJSONDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHomePageJSONDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHomePageJSONDataRequest) ProtoMessage() {}

func (x *GetHomePageJSONDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHomePageJSONDataRequest.ProtoReflect.Descriptor instead.
func (*GetHomePageJSONDataRequest) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{4}
}

func (x *GetHomePageJSONDataRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetHomePageJSONDataRequest) GetDesign() bool {
	if x != nil {
		return x.Design
	}
	return false
}

type GetHomePageJSONDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JsonData string `protobuf:"bytes,1,opt,name=json_data,json=jsonData,proto3" json:"json_data,omitempty"`
}

func (x *GetHomePageJSONDataResponse) Reset() {
	*x = GetHomePageJSONDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHomePageJSONDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHomePageJSONDataResponse) ProtoMessage() {}

func (x *GetHomePageJSONDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHomePageJSONDataResponse.ProtoReflect.Descriptor instead.
func (*GetHomePageJSONDataResponse) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{5}
}

func (x *GetHomePageJSONDataResponse) GetJsonData() string {
	if x != nil {
		return x.JsonData
	}
	return ""
}

type SetHomePageJSONDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Design   bool   `protobuf:"varint,2,opt,name=design,proto3" json:"design,omitempty"`
	JsonData string `protobuf:"bytes,3,opt,name=json_data,json=jsonData,proto3" json:"json_data,omitempty"`
}

func (x *SetHomePageJSONDataRequest) Reset() {
	*x = SetHomePageJSONDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetHomePageJSONDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetHomePageJSONDataRequest) ProtoMessage() {}

func (x *SetHomePageJSONDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetHomePageJSONDataRequest.ProtoReflect.Descriptor instead.
func (*SetHomePageJSONDataRequest) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{6}
}

func (x *SetHomePageJSONDataRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SetHomePageJSONDataRequest) GetDesign() bool {
	if x != nil {
		return x.Design
	}
	return false
}

func (x *SetHomePageJSONDataRequest) GetJsonData() string {
	if x != nil {
		return x.JsonData
	}
	return ""
}

type NewsUpdateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title    string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Summary  string `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
	Image    string `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	News     string `protobuf:"bytes,5,opt,name=news,proto3" json:"news,omitempty"`
	Category string `protobuf:"bytes,6,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *NewsUpdateInfo) Reset() {
	*x = NewsUpdateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsUpdateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsUpdateInfo) ProtoMessage() {}

func (x *NewsUpdateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsUpdateInfo.ProtoReflect.Descriptor instead.
func (*NewsUpdateInfo) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{7}
}

func (x *NewsUpdateInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NewsUpdateInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NewsUpdateInfo) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *NewsUpdateInfo) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *NewsUpdateInfo) GetNews() string {
	if x != nil {
		return x.News
	}
	return ""
}

func (x *NewsUpdateInfo) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

type UpdateNewsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *NewsUpdateInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *UpdateNewsRequest) Reset() {
	*x = UpdateNewsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNewsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNewsRequest) ProtoMessage() {}

func (x *UpdateNewsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNewsRequest.ProtoReflect.Descriptor instead.
func (*UpdateNewsRequest) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateNewsRequest) GetInfo() *NewsUpdateInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateNewsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UpdateNewsResponse) Reset() {
	*x = UpdateNewsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNewsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNewsResponse) ProtoMessage() {}

func (x *UpdateNewsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNewsResponse.ProtoReflect.Descriptor instead.
func (*UpdateNewsResponse) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateNewsResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListNewsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories []string `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
	Page       int32    `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize   int32    `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListNewsRequest) Reset() {
	*x = ListNewsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNewsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNewsRequest) ProtoMessage() {}

func (x *ListNewsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNewsRequest.ProtoReflect.Descriptor instead.
func (*ListNewsRequest) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{10}
}

func (x *ListNewsRequest) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *ListNewsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListNewsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListNewsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Newses []*NewsInfo `protobuf:"bytes,1,rep,name=newses,proto3" json:"newses,omitempty"`
	Count  int32       `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ListNewsResponse) Reset() {
	*x = ListNewsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNewsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNewsResponse) ProtoMessage() {}

func (x *ListNewsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNewsResponse.ProtoReflect.Descriptor instead.
func (*ListNewsResponse) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{11}
}

func (x *ListNewsResponse) GetNewses() []*NewsInfo {
	if x != nil {
		return x.Newses
	}
	return nil
}

func (x *ListNewsResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_news_proto protoreflect.FileDescriptor

var file_news_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6e, 0x65,
	0x77, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4d, 0x0a, 0x06, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x22, 0xb6, 0x01, 0x0a, 0x08, 0x4e, 0x65, 0x77,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x22, 0x20, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x39, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x6e, 0x65, 0x77, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4e, 0x65, 0x77, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6e, 0x65, 0x77, 0x73, 0x22, 0x44,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x4a, 0x53, 0x4f,
	0x4e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65,
	0x73, 0x69, 0x67, 0x6e, 0x22, 0x3a, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6d, 0x65, 0x50,
	0x61, 0x67, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x61, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x4a,
	0x53, 0x4f, 0x4e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x96, 0x01, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x65, 0x77, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x65, 0x77, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x41, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2c, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0x24, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x62, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x77,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x54, 0x0a, 0x10, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x06, 0x6e, 0x65, 0x77, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6e, 0x65, 0x77, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x73, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32,
	0x8f, 0x03, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x39, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x18, 0x2e, 0x6e, 0x65, 0x77,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4e, 0x65, 0x77, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x24, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x4a, 0x53,
	0x4f, 0x4e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x4f, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x4a,
	0x53, 0x4f, 0x4e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x4a, 0x53,
	0x4f, 0x4e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x49, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x12,
	0x1b, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6e,
	0x65, 0x77, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65,
	0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x08,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x19, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x41, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x62, 0x61, 0x73, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x72, 0x65, 0x70, 0x6f, 0x2d, 0x6e, 0x65, 0x77, 0x73, 0x2d, 0x67, 0x6f, 0x3b, 0x6e, 0x65,
	0x77, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_news_proto_rawDescOnce sync.Once
	file_news_proto_rawDescData = file_news_proto_rawDesc
)

func file_news_proto_rawDescGZIP() []byte {
	file_news_proto_rawDescOnce.Do(func() {
		file_news_proto_rawDescData = protoimpl.X.CompressGZIP(file_news_proto_rawDescData)
	})
	return file_news_proto_rawDescData
}

var file_news_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_news_proto_goTypes = []interface{}{
	(*Author)(nil),                      // 0: news.api.Author
	(*NewsInfo)(nil),                    // 1: news.api.NewsInfo
	(*GetNewsRequest)(nil),              // 2: news.api.GetNewsRequest
	(*GetNewsResponse)(nil),             // 3: news.api.GetNewsResponse
	(*GetHomePageJSONDataRequest)(nil),  // 4: news.api.GetHomePageJSONDataRequest
	(*GetHomePageJSONDataResponse)(nil), // 5: news.api.GetHomePageJSONDataResponse
	(*SetHomePageJSONDataRequest)(nil),  // 6: news.api.SetHomePageJSONDataRequest
	(*NewsUpdateInfo)(nil),              // 7: news.api.NewsUpdateInfo
	(*UpdateNewsRequest)(nil),           // 8: news.api.UpdateNewsRequest
	(*UpdateNewsResponse)(nil),          // 9: news.api.UpdateNewsResponse
	(*ListNewsRequest)(nil),             // 10: news.api.ListNewsRequest
	(*ListNewsResponse)(nil),            // 11: news.api.ListNewsResponse
	(*protorepo_share_go.Empty)(nil),    // 12: share.api.Empty
}
var file_news_proto_depIdxs = []int32{
	0,  // 0: news.api.NewsInfo.author:type_name -> news.api.Author
	1,  // 1: news.api.GetNewsResponse.news:type_name -> news.api.NewsInfo
	7,  // 2: news.api.UpdateNewsRequest.info:type_name -> news.api.NewsUpdateInfo
	1,  // 3: news.api.ListNewsResponse.newses:type_name -> news.api.NewsInfo
	2,  // 4: news.api.NewsService.GetNews:input_type -> news.api.GetNewsRequest
	4,  // 5: news.api.NewsService.GetHomePageJSONData:input_type -> news.api.GetHomePageJSONDataRequest
	6,  // 6: news.api.NewsService.SetHomePageJSONData:input_type -> news.api.SetHomePageJSONDataRequest
	8,  // 7: news.api.NewsService.UpdateNews:input_type -> news.api.UpdateNewsRequest
	10, // 8: news.api.NewsService.ListNews:input_type -> news.api.ListNewsRequest
	1,  // 9: news.api.NewsService.GetNews:output_type -> news.api.NewsInfo
	5,  // 10: news.api.NewsService.GetHomePageJSONData:output_type -> news.api.GetHomePageJSONDataResponse
	12, // 11: news.api.NewsService.SetHomePageJSONData:output_type -> share.api.Empty
	9,  // 12: news.api.NewsService.UpdateNews:output_type -> news.api.UpdateNewsResponse
	11, // 13: news.api.NewsService.ListNews:output_type -> news.api.ListNewsResponse
	9,  // [9:14] is the sub-list for method output_type
	4,  // [4:9] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_news_proto_init() }
func file_news_proto_init() {
	if File_news_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_news_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Author); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHomePageJSONDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHomePageJSONDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetHomePageJSONDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsUpdateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNewsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNewsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNewsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNewsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_news_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_news_proto_goTypes,
		DependencyIndexes: file_news_proto_depIdxs,
		MessageInfos:      file_news_proto_msgTypes,
	}.Build()
	File_news_proto = out.File
	file_news_proto_rawDesc = nil
	file_news_proto_goTypes = nil
	file_news_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NewsServiceClient is the client API for NewsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NewsServiceClient interface {
	GetNews(ctx context.Context, in *GetNewsRequest, opts ...grpc.CallOption) (*NewsInfo, error)
	GetHomePageJSONData(ctx context.Context, in *GetHomePageJSONDataRequest, opts ...grpc.CallOption) (*GetHomePageJSONDataResponse, error)
	SetHomePageJSONData(ctx context.Context, in *SetHomePageJSONDataRequest, opts ...grpc.CallOption) (*protorepo_share_go.Empty, error)
	UpdateNews(ctx context.Context, in *UpdateNewsRequest, opts ...grpc.CallOption) (*UpdateNewsResponse, error)
	ListNews(ctx context.Context, in *ListNewsRequest, opts ...grpc.CallOption) (*ListNewsResponse, error)
}

type newsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNewsServiceClient(cc grpc.ClientConnInterface) NewsServiceClient {
	return &newsServiceClient{cc}
}

func (c *newsServiceClient) GetNews(ctx context.Context, in *GetNewsRequest, opts ...grpc.CallOption) (*NewsInfo, error) {
	out := new(NewsInfo)
	err := c.cc.Invoke(ctx, "/news.api.NewsService/GetNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) GetHomePageJSONData(ctx context.Context, in *GetHomePageJSONDataRequest, opts ...grpc.CallOption) (*GetHomePageJSONDataResponse, error) {
	out := new(GetHomePageJSONDataResponse)
	err := c.cc.Invoke(ctx, "/news.api.NewsService/GetHomePageJSONData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) SetHomePageJSONData(ctx context.Context, in *SetHomePageJSONDataRequest, opts ...grpc.CallOption) (*protorepo_share_go.Empty, error) {
	out := new(protorepo_share_go.Empty)
	err := c.cc.Invoke(ctx, "/news.api.NewsService/SetHomePageJSONData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) UpdateNews(ctx context.Context, in *UpdateNewsRequest, opts ...grpc.CallOption) (*UpdateNewsResponse, error) {
	out := new(UpdateNewsResponse)
	err := c.cc.Invoke(ctx, "/news.api.NewsService/UpdateNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) ListNews(ctx context.Context, in *ListNewsRequest, opts ...grpc.CallOption) (*ListNewsResponse, error) {
	out := new(ListNewsResponse)
	err := c.cc.Invoke(ctx, "/news.api.NewsService/ListNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NewsServiceServer is the server API for NewsService service.
type NewsServiceServer interface {
	GetNews(context.Context, *GetNewsRequest) (*NewsInfo, error)
	GetHomePageJSONData(context.Context, *GetHomePageJSONDataRequest) (*GetHomePageJSONDataResponse, error)
	SetHomePageJSONData(context.Context, *SetHomePageJSONDataRequest) (*protorepo_share_go.Empty, error)
	UpdateNews(context.Context, *UpdateNewsRequest) (*UpdateNewsResponse, error)
	ListNews(context.Context, *ListNewsRequest) (*ListNewsResponse, error)
}

// UnimplementedNewsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNewsServiceServer struct {
}

func (*UnimplementedNewsServiceServer) GetNews(context.Context, *GetNewsRequest) (*NewsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNews not implemented")
}
func (*UnimplementedNewsServiceServer) GetHomePageJSONData(context.Context, *GetHomePageJSONDataRequest) (*GetHomePageJSONDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHomePageJSONData not implemented")
}
func (*UnimplementedNewsServiceServer) SetHomePageJSONData(context.Context, *SetHomePageJSONDataRequest) (*protorepo_share_go.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHomePageJSONData not implemented")
}
func (*UnimplementedNewsServiceServer) UpdateNews(context.Context, *UpdateNewsRequest) (*UpdateNewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNews not implemented")
}
func (*UnimplementedNewsServiceServer) ListNews(context.Context, *ListNewsRequest) (*ListNewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNews not implemented")
}

func RegisterNewsServiceServer(s *grpc.Server, srv NewsServiceServer) {
	s.RegisterService(&_NewsService_serviceDesc, srv)
}

func _NewsService_GetNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).GetNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.api.NewsService/GetNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).GetNews(ctx, req.(*GetNewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_GetHomePageJSONData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHomePageJSONDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).GetHomePageJSONData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.api.NewsService/GetHomePageJSONData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).GetHomePageJSONData(ctx, req.(*GetHomePageJSONDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_SetHomePageJSONData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHomePageJSONDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).SetHomePageJSONData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.api.NewsService/SetHomePageJSONData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).SetHomePageJSONData(ctx, req.(*SetHomePageJSONDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_UpdateNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).UpdateNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.api.NewsService/UpdateNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).UpdateNews(ctx, req.(*UpdateNewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_ListNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).ListNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.api.NewsService/ListNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).ListNews(ctx, req.(*ListNewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NewsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "news.api.NewsService",
	HandlerType: (*NewsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNews",
			Handler:    _NewsService_GetNews_Handler,
		},
		{
			MethodName: "GetHomePageJSONData",
			Handler:    _NewsService_GetHomePageJSONData_Handler,
		},
		{
			MethodName: "SetHomePageJSONData",
			Handler:    _NewsService_SetHomePageJSONData_Handler,
		},
		{
			MethodName: "UpdateNews",
			Handler:    _NewsService_UpdateNews_Handler,
		},
		{
			MethodName: "ListNews",
			Handler:    _NewsService_ListNews_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "news.proto",
}
